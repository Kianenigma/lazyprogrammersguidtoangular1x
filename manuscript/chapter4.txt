
# Controllers, templates and more!

In the previous chapter, although we learned some very good fundamental details of Angular (specially on controllers and `$scope`) , but the code that we worked on was mostly like a *Hello World* for Angular.
In this chapter we will learn more technical details of Angular. by technical I mean that they are going to be details that you surely will need to know them and use them in your next Angular project!

The code for this chapter can be found under a separate folder under the [github repository](https://github.com/Kianenigma/lazyprogrammersguidtoangular1x/tree/master/code/chapter4) associated with this project.

As a *heads up* for this chapter, it is good to mention that we are going to learn a LOT in this chapter. and as the name suggests, they are all going to be implemented inside and using a controller. in the next chapter we are going to dedicate our time to revisit all that we learn here to see which of them are suited to be implemented via a **Service** or a **Directive** so they become **Reusable components**.

We are going to start with a single page application with an `index.html` and `main.js` file linked like the previous chapter. I also included twitter bootstrap to make the pages that we create a little bit brighter! if you are not familiar with it, it's just library that you can use a set of css classes it provides to have a better looking HTML.

## More advance iteration with ng-repeat and pipe filters

In the previous chapter we barely introduced `ng-repeat`, while one of the most commonly used Angular directives. Let's inspect it more and see how it behaves with objects instead of arrays, and how to mix it up with some filters.

### ng-repeat with objects

You now know how to iterate a simple array. Two more things to learn:

 1. Iterating over objects
 2. Iterating over arrays of objects

We'll change our list of actor to the following:

```javascript
$scope.actors = {
    "Ted": { lastName: "Mosbey", age: 27 },
    "Barney": { lastName: "Stinson", age: 30 }
  }
```

If you iterate over this object with the same way as we did before, you'll find something like this:

```html
	<li class="list-group-item">
		{ lastName: "Mosbey", age: 27 }
	</li>
	<li class="list-group-item">
		{ lastName: "Stinson", age: 30 }
	</li>
	...
```

We have no access to the `key` of the object and the values are displayed as plaing object.

Two point will solve this:

**First**, you can use `ng-repeat="for (key, value) in someObject"` to have access to both the keys and both the values.

**Second**, you should know that Angular's template syntax actually supports a large subset of javascript operation, like : `{{ a + b }}`, `{{ someFunction(someProp) }}`, `{{ someString + ' , I am concatenated! }}'`, so you can use the **dot operation** to access the properties the object associated with a key. Change the html template:

```html
<li class="list-group-item" ng-repeat="(name, detail) in actors">
	{{ name }} [{{detail.lastName}}] is {{ detail.age }} years old!
</li>
```

Having this in mind you can even figure out how you can have nested loops. change to `actors` property to:

```javascript
$scope.actors = {
    "Ted": {
      lastName: "Mosbey",
      age: 27,
      bars: ["Blind Tiger", "Torst", "Good Beer"]
    },
    "Barney": {
      lastName: "Stinson",
      age: 30,
      bars: ["The Poney Bar"]
    }
  }
```

And your HTML to:

```html
<li class="list-group-item" ng-repeat="(name, detail) in actors">
          {{ name }} [{{detail.lastName}}] is {{ detail.age }} years old!
          I like catching a beer in
          <span ng-repeat="bar in detail.bars"> {{ bar }} , </span>
</li>
```

There is a problem here! We really don't want the last `,` there. Let's use some template magic to get rid of it:

```html
<span ng-repeat="bar in detail.bars">
      {{ bar }} {{ ($index === ( $parent.detail.bars.length-1 ) ) ? '' : ',' }}
</span>
```

As you see, we used an if statement to check the index of the bar being printed, with the length of all of the bars, and when we reach the last one, we omit the `,`

You should know clearly why `$parent.detail.bar` is what we compared it's length with `$index` (nested loops! each creating their own scopes!) , if you don't, jump right back to the section about `ng-repeat` in chapter 3!


### Filters

Filters provide a way to modify any model binding in your html. By the Term model binding I mean any place that you place one your $scope properties inside HTML. It could be:

 - Template binding `{{ someModel }}`
 - Loops `<div ng-repeat="item in someModel">`

Or any other place. The filters work similar to Unix pipe style. think of your model as the input and with each `|`operator it will be piped into a filter and the results come out. with this way, multiple pipes can be combined and the output of one of them could be added to the other one.

Like many other situations, Angular provides us with a set of built in filters, but with can extend them to any usage and build our own filter. you can read the full list of filters here[enter link description here](https://docs.angularjs.org/guide/filter).

Let's begin testing with some of the built in filters. one of these filters are called `uppercase` and you probably guess from the name what it is going to do! Apply it to the list of beers from the previous section with:

```html
<span ng-repeat="bar in detail.bars">
  {{ bar | uppercase }} {{ ($index === ($parent.detail.bars.length-1)) ? '' : 'or' }}
</span>
```

Notice the `|` pipe after `{{ bar }}`. Aside from simple filters like `uppercase` that works on a single object, there are some more interesting filters that work on collection, arrays, and can be applied to loops.

One of the best filters for collections is called... well, it's called `filter`! It works only on arrays and takes an argument as input and returns only those elements in the array that contain the value given.

Modify the following for an actor's list of favorite beer.

```html
<li class="list-group-item" ng-repeat="(name, detail) in actors">
     {{ name }} [{{detail.lastName}}] is {{ detail.age }} years old! I like catching a beer in
     <input type="text" ng-model="beerFilter" />
     <span ng-repeat="bar in detail.bars | filter : beerFilter">
             {{ bar | uppercase }} {{ ($index === ($parent.detail.bars.length-1)) ? '' : 'or' }}
     </span>
</li>
```

Change the value inside the `input` tag you see that the array of beers will actually get filtered according to that value. As mentioned before, the fact that we never declared `$scope.beerFilter` is not a problem. It will be equal to undefined at the beginning and will have a value as we modify the `input` tag.

The `orderBy` filter works over an array of objects by taking one key name as the filter and sorting the array according to that key. For example: `<div ng-repeat="item in array | orderBy 'keyName'"> ... </div>` will sort an array with the format

```javascript
$scope.array = [
	{name: "item1", key:3},
	{name: "item2", key:2},
	{name: "item3", key:1}
[
```

according to `key` property.

Let's finish this section with creating a custom filter. Custom filters can be created using the `.filter()` method on a module. it must return o function that takes the input value as argument and returns the new formatted values as output.

The following filter simply takes an string input and returns the same value in reverse.

```javascript
myApp.filter('strRev', function () {
  return function (inp) {
    return inp.split('').reverse().join('')
  }
})
```

You can now test it with :

```html
<span ng-repeat="bar in detail.bars | filter : beerFilter">
      {{ bar | strRev }} {{ ($index === ($parent.detail.bars.length-1)) ? '' : 'or' }}
</span>
```

As you might have noticed, we have two types of filters, those who operate on single values (pipe) and those who filter a collection. Creating a custom filter that operates on a collection has the same API and routine as above, but it takes additional input arguments beside `inp`. As a good exercise, you can go ahead and read some examples of this type of filter and work on creating the following the filters :

 - One that filters an object over it key names.
 - One that takes an array and returns all of its elements in `uppercase` format.

----------


## Style manipulation with Angular

Angular provides convenient ways to manipulate the DOM attributes or Style. Some of these ways will be described in this section. the key difference between Angular's way and vanilla Javascript's way is that using Angular, as you might expect, we can control element's style and behavior using `$scope` properties, which gives us a better and easier way of control.

### Using ng-show, ng-hide and ng-if
Two of the most basic of these UI controls are two directives named: ng-show and ng-hide. as the names suggest, they both hide or show an element based on the expression given to it. Look at the following example:

```html
<div class="row">
     <div class="col col-sm-6 col-sm-offset-3">
        <button class="btn btn-success btn-block" ng-show="true">
            Click me for some process
        </button>
     </div>
</div>
```

As you see, the button is there. now change the `ng-show` value to `false`. As you might expect, the button goes away. Now browse the DOM elements with your browser. As you find the button node, you'll see that it has been rendered as:

```html
<button class="btn btn-success btn-block ng-hide" ng-show="true">
      Click me for some process
</button>
```

The `ng-hide` class automatically adds the `display: none` property to the node element. There are some important notes to keep in mind about `display: none` here:

 - This property will hide all of the child elements
 - ng-hide **will not cause the DOM elements to be not rendered**, it just hides them.

The `ng-hide` works exactly in the same manner, but as the name suggests, the Boolean value *is the other way around* and when it is equal to `false`, the element will not be displayed.

The ng-if directive works almost the same as ng-show, but there is one key difference, if the expression provided to `ng-if` is equal to `false`, the element will actually be **removed** from the DOM, and if later evaluates to `true` again, it will be **recreated** once again.

We mentioned :

> the key difference between Angular's way and vanilla Javascript's way is that using Angular, as you might expect, we can control element's style and behavior using `$scope` properties, which gives us a better and easier way of control.

But so far, even though we learned how ng-show, `ng-hide` and `ng-if` work, we only used static `true / false` values for testing. let's try this in a more realistic way and use `$scope` properties to control the button:

Suppose that the button will perform an http request as you click it and you wish for it to display a loading icon during this period and then fade away.

We add to state variables to our scope, indicating weather the button or the icon should be displayed or not, and a function to change them.

```javascript
$scope.btnDisplay = true;
$scope.iconDisplay = false;

$scope.doProcess = function () {
  $scope.iconDisplay = true;
  $timeout(function () { $scope.btnDisplay = false }, 3000);
}
```

And then just assign these values to the HTML markup that we had:

```html
<button ng-click="doProcess()" ng-if="btnDisplay" class="btn btn-success btn-block">
            <span
	        ng-show="iconDisplay"
	        class="glyphicon glyphicon-cloud-download">
	        </span>
	        {{ iconDisplay ? 'Waiting for process' : 'Click me for some process'}}
</button>
```

### Using ng-class

The `ng-class` directive is one of my own favorite directives! in allows you to dynamically assign a class to an element, according to a boolean expression defined from your controller.

Assume that you want to assign a different color to your button while it is processing, and show a red color when if it has failed for some reasons. We'll use two classes from twitter bootstrap named `btn-warnign` and `bnt-danger`.

`ngClass` can be applied in many ways, one of them is using an ***object*** with the following format:

```html
<div ng-class="{aClassToBeAdded: conditionForThisClass, secondClass: secondCondition}"></div>
```

An important note on this object is that by default it does not require you to wrapp the condition and class name in quotations, but if the class name has dashes, it **Must** be.

```html
<div ng-class="{'a-dash-class-name': conditionForThisClass, secondClass: secondCondition}"></div>
```

The condition can be a model associated with `$scope`,

```javascript
$scope.conditionForThisClass = true
```

an expression, or negation of an expression (don't miss the `!` before second expression) :

```html
<div ng-class="{'a-dash-class-name': someModel.name == 'aName' , secondClass: !secondCondition}"></div>
```

or a function:

```html
<div ng-class="{'a-dash-class-name': someFunction()}"></div>
```

Ok, with all of this in mind let's add what we described, changing the color of the button while it is processing. Like many other changes in our code, this will also be jsy a one line small modification:

```html

<button ng-class="{'btn-warning' : iconDisplay, 'btn-info': !iconDisplay}" ng-click="doProcess()" ng-if="btnDisplay" class="btn btn-block">
	<span ng-show="iconDisplay" class="glyphicon glyphicon-cloud-download"></span>
	{{ iconDisplay ? 'waiting for process' : 'Click me for some process'}}
</button>
```

and Thats it! we just remove the `btn-success` default class, and added two other conditional classes using `ng-class`.

Aside from ***Object*** there are more ways to use ng-class. another one that might be useful is:

Using an model that evaluates to an ***Array***. as an example:

```javascript
$scope.someClasses = ["btn-danger", "btn-xs"] ;
```

and

```html
<button class="btn" ng-class"someClasses"> </div>
```

Of course, in this example, as you change the `someClasses`, to button classes change with it.

You can read more about ngClass [here](https://docs.angularjs.org/api/ng/directive/ngClass).




----------


## Ups and downs of < form > management with Angular

Angular provide some helper classes that help you work more easily with a `<form>` tag.

To examine these classes first hand we use the template below (in order to get this to work,  all elements must have a `name=` and all inputs must have `ngModel`) :

```html
<form name="submitform" novalidate>
    <div class="form-group">
       <label> Email</label>
       <input ng-model="formData.email" class="form-control" name="email" type="email" required>
    </div>

    <div class="form-group">
       <label> Name </label>
       <input ng-model="formData.name" class="form-control" name="name" type="text" required />
    </div>

    <div class="form-group">
       <label> Password </label>
       <input ng-model="formData.password" class="form-control"
	       name="password" type="password" required
	       />
    </div>
    <div class="form-group">
	  <button class="btn btn-success" ng-click="submit()"> Submit </button>
    </div>
 </form>
```

Notice how we put `novalidate` attribute on the `form` tag and `required` on each of the inputs.

You can see that before taking any type of action, the form is rendered like:

```html
<form name="submitform" class="classng-pristine ng-invalid ..."> ... </form>
```

Notice how Angular added the classes. This means that Angular will detect automatically that a form exists and starts watching it for changes.

You should convice yourself that these classes are logical with respect to the attributes that we placed on our form. for example since all inputs had `required`, if you leave one of them empty, we see : `ng-invalid-required`. if you type a name inside `email`, since it had a `type='email`', you will see: `ng-invalid-email`.

You can also find similar class names on each `<input>` inside the form. such as `ng-dirty`, `ng-touched`, indicating the field's state.

These information can also be used inside the controller, there rule, accourding to which Angular watches forms is:

A property equal to the form's `name=''` attribute will be added to the **scope**, in which the form exists. This new property holds information about whether the form is valid, has it been submitted, have the fields been touched so far or not and so on. To experiment this, try passing a variable named `submitForm` back to controller and log it:

```html
<button class="btn btn-success" ng-click="submit(submitForm)"> Submit </button>
```

```javascript
$scope.submit = function(form) {
	console.log(form);
}
```

You can see how similar information is also stored inside this property ($scope.submitForm, in this case). There are many more details about form validation and you can read more about them [here](https://docs.angularjs.org/guide/forms). Instead of going through every single detail which you probably won't need in a decade, we spend time explaining a common usage pattern for Angular form management.


If you inspect the form object that we logged closely, you'll see that errors associated with classes that were added to `<form>` are stored in:

```javascript
$scope.submit = function(form) {
	// form.$error
}
```

and errors associated with each input, for example `email` is stored inside

```javascript
$scope.submit = function(form) {
	// form.email.$error
}
```

and so on. Let's use these to add a validation for our email field. we'll create all af the error texts required, but hide all of them and only show one, depending on the state of the form. for example when the value of `submitForm.email.$error.required` is `true`, we should show a text telling that is can not be empty.

Change the email section as following:

```html
<div class="form-group">
   <label> Email</label>

   <!-- Notice the ng-show condition -->
   <span class="label label-danger" ng-show="submitform.email.$error.required">
     Required!
   </span>
   <!-- Notice the ng-show condition -->
   <span class="label label-danger" ng-show="submitform.$error.email">
     Invalid email!
   </span>

   <input ng-model="formData.email" class="form-control" name="email" type="email" required>
</div>
```

Of course there more to it than this, HTML provides more form validation attributes, min/max length , min/max value and so on. All of them could be used and Angular will provide the corresponding error values and classes. Aside from using these attributes, we can use them with a `ng-` prefix and Angular's magical data binding will be available!

Change the password section to the following to see this:

```html
<div class="form-group">
  <label> Password </label>
  <span class="label label-danger"
        ng-show="submitform.password.$error.minlength">
        That's too short!
   </span>
  <input ng-minlength="minpwd" ng-model="formData.password" class="form-control" name="password" type="password" required />
</div>
```

Notice how we set `ng-minlength="minpwd"`, so:

```javascript
$scope.minpwd = 3 ;
```

must be declared. of course you could also write something like: `ng-minlength="3"`, we just wanted to show the data binding stuff and .. well you get the point!

Two final notes,

User don't usually like facing a pile of error messages when they haven't even started with filling a form! A good way to prevent this is to add the `submitform.filedname.$touched` condition to display the error messages. This will display the message only when the user types something and leaves the filed (the ***focus*** leaves the filed (notice the passed tense of the name, $touch **ed**).

Something like this works for our `email` field:

```html
<span
  class="label label-danger"
  ng-show="submitform.email.$error.required && submitform.email.$touched">
  Required!
</span>
<span
  class="label label-danger"
  ng-show="submitform.$error.email && submitform.email.$touched">
  Invalid email!
</span>
```

Many times, these simple validation might not suffice, as with HTML that had `pattern`, a simple way is to provide `ng-pattern` with a ***[regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)*** for a more sophisticated validation.

After validating a form, thing always wnd up with making an AJAX call which can be done using $http, which is what we are going to learn in the next seciton. 

----------


## Using $http and $watch


There are many providers that you can inject to your controller and use. The most obvious one here is `$scope`. Aside from that, a number of other providers that you probably will inevitably use them. we mention all of them here and discuss to of them in detail. 

1. $http: provider for making **Ajax** calls. Pretty useful!
2. $watch: a method used for subscribing to state change event on scope properties, providers etc. 
3. $rootScope: a parent for all scopes, which we'll discuss at the end of this chapter.
4. $state and other route providers: a set of providers usually providing information about the current route of the application, route parameters etc. We will discuss this in a separate chapter. 
5. user defined providers: You'll learn soon that building isolated group of functionalities inside a `.factory` or `.service` is one of the most common patterns in angular.

So, let's dive into the first two providers that we wanted to discuss.

### Using $http

As the name suggests, this service helps us make http requests to remote or local servers. The overall syntax of this service could be summarized as: 

```javascript
$http({
	mathod: "GET", 
	url: "/some/path",
	data: {someDataKey : 12}, 
	headers: {'additional-header': 'hello $http'},
	params : {'a': 13} 
}).then( successCallback, errorCallback); 

```

Before we get into more detail, let's discuss the code above. If you have a simple knowledge of http request, none of the keys defined above and passed to `$http` should be ambiguous for you. Just for double checking, it's safe to say that the request above will be translated to: 

a GET Request to the same domain - since the path we provided started with `/`

with a query string of : `/some/path?a=13`

and an additional header added to the default HTTP headers.

and a JSON payload equal to {someDataKey : 12}

Good, moving forward. The next thing that catches out eyes is the `then()` fucntion, which indicated that `$http.get()` returns a **Promise**. Promises are a very important concept in both angular and general javascript (and will be natively supported in ES2016). if you are familiar with promises, you can skip this section, if not hold on tight because what we are about to learn is very important. 

#### de-tour on Promises and Callbacks 

Javascript is a single threaded language, therefor it has it's own unique way of handling asynchronous operation. When we have only one thread, it means that the main program’s flow can never - should never - **wait** for an operation that takes time. it should move pass it and come back to it later, in an **Event based** manner. There are two famous ways two implement this. ***Promises*** and ***Callback functions***. 

The Callback way usually works like this: we pass a function, to the function that might take a long time and say to it: 
> Hey, long time function! please invoke this function that i'm giving it to you now when you are finished and btw pass the result of your operation to it as argument, if you want. 

```javascript

var someSlowDataFetching = function(args, callback) {
	operation.start() 
	// my process will take time
	// some more time 
	// even more
	// seriously, it's gonna take a while
	
	
	// and when I am finally finished: 
	if ( operation.isOK ) {
		callback(null, operation.data) ;
	} else {
		callback(someErr, null) ;
	}
}

someSlowDataFetching(args, function(err, data) {})

```

You should read and examine this example carefully and completely understand how javascript handler parallelism with callback function. 

To save time we will not discuss here how promises are implemented, instead we are just going to focus on *how to use them*. We'll begin by defining it

A promise is ... well, its a **Promise** that assures you of receiving *Some* response about the task which is going to take some time. A promise can either *resolve* or *reject* 

- **resolve** means that the async task was completed, regardless of the result, the result could even be e failure, but the task was completed with no errors. 
- **reject** means that execution of the task was not competed because of some errors. 

Async tasks using Promises don't take in a function to invoke it later, instead, they return a promise, which has a `.then()` method, which will be invoked later when the task is completed.  

```
function someSlowPromiseFn(args) {
	operation.start() 
	// my process will take time
	// some more time 
	// even more
	// seriously, it's gonna take a while
	
	// and when I am finally finished: 
	if ( operation.isOK ) {
		promise.resolve(operation.data); 
	} else {
		promise.reject(operation.data); 
	}
}


someSlowPromiseFn(args)
	.then(
		function onResolve() {...},
		function onReject()  {...}
		); 
```

The name of the functions passed to `then()` were meant to be a hint, to imply that: 

***First argument*** of `then()` will be called when the promise resolves.

***Second argument*** of `then()` will be called when the promise rejects.

As we reach the end of our de-tour on promises, the main purpose of this detour has satisfied and now you exactly know what this means: 

```javascript
$http({....}).then(
	function() {},
	function() {}
	) ;

```

#### Continuing with $http

To refresh your mind on what we had: 

```javascript
$http({
	mathod: "GET", 
	url: "/some/path",
	data: {someDataKey : 12}, 
	headers: {'additional-header': 'hello $http'},
	params : {'a': 13} 
}).then( successCallback, errorCallback); 

```

Now let's try and make this more realistic by calling a real JSON API. we'll use github's public API for this reason. If you refer to the [documentation](https://developer.github.com/v3/repos/) you'll see that you can fetch the list of repositories by making a `GET` request to: 

```json
https://api.github.com/users/{username}/repos
```

You can test this with: 

```bash
curl -i https://api.github.com/users/kianenigma/repos
```

in your command line. let's make this call in angular and ispect the result. 

```javascript
myApp.controller("mainCtrl", function($scope, ... , $http ) { 
	// remember to inject $http service
	
	 $http({
      method: 'GET',
      url: 'https://api.github.com/users/kianenigma/repos',
    })
    .then(function (response) {
      console.log(response);
    }, function (err) {
      console.log("ERROR ", err);
    })
})
```

Now change the username to an invalid one `https://api.github.com/users/invalidUserrrrrblahbalh/repos` and see how the error callback is being invoked. 

As you might've mentioned, both the success and error callbacks have the same schema and the following keys are the ones you will probably need: 

- `response.data` : data associated with the response
- `response.statusCode` : status code of the response. Note that when the success callback is being invoked, we are sure that status code has a value in 200/300 range `2**/3**` and the 400/500 status code ranges are associated with errors, `404 not found` and `500 internal server error` for example. 
- `response.config.headers` : http headers of the response. it is common to use them specially when using [json web tokens](https://jwt.io/) - aka. JWT - as authentication method. 

As final notes on $http: 

- you'll learn in a seprate chapter about a concept named `http interceptor`. It is VERY common to feel the need to add a specific data or header to *ALL* of your http requests, such as web token authentication header. http interceptors help you do this.
- There is actually another way of watching for an http response, name `success` and `error`. The syntax is like the following: 

```javascript
$http({
	method : "GET", 
	...
})
	.success(function(data, status, config) {}) // called when request returns fine
	.error(function(data, status, config) {}) // called on error
	.finally(function() {}) ;  // called either way!

```
Although this was my personal favorite syntax (and dark deep secret!), there are many reasons not to use it. You can read about [them](http://www.codelord.net/2015/05/25/dont-use-$https-success/) [here](https://www.peterbe.com/plog/promises-with-$http). 

- the following syntactic sugars are provided for specific http verbs: 

```javascript
$http.get('/someUrl', config).then(successCallback, errorCallback);
$http.post('/someUrl', data, config).then(successCallback, errorCallback);

and more for /DELETE /PUT and so on. 
```
You can read the full list [here](https://docs.angularjs.org/api/ng/service/$http).

We'll extend this example of Github in the next section to make something more interesting out of it. 

### Using $watch

The `$watch` service helps us add `eventListeners` to model changes, as the name suggests. The overall syntax is like this: 

```javascript
$scope.$watch("stingEqualToPropertyNameInScope", function(newValue, oldValue) {
	
})

```

here, by `stingEqualToPropertyNameInScope ` we mean the name of a property assigned to scope. 

As an example, add a `username` property to `$scope` and bind it to the an input tag :

```html
<input ng-model="username" />
```

and 

```javascript
$scope.username = "initialUserName"; 

$scope.$watch("username", function(o, n) {
	console.log(o,n); 
})
```

now change the username value and see the logs for change. 

There are two very common situations when it comes to $watch that you have to pay attention to: 

1. By default, `$scope.watch()` performs a shallow equality test. by shallow we mean that changes like `[1,2] => [1]` , `1 => 2` , `"hello" => "mellow"` are detected, but changes to deep properties like `{ foo : { bar : 1 } } => { foo : {bar : 2}}` are **NOT**. in order to fix this you can set the third argument of the `$watch` to `true`, so that it perform deep search: 

```javascript
$scope.$watch("username", function(o, n) {
	console.log(o,n); 
}, true); 
```

2. It is extremely! common (actually *common* is not a good word here, it's a famous  pattern) to use a `service` for fetching json data from a remote API and store it there. We usually assign a portion of data stored inside a service and display to the user. So it would be pretty good if we could just listen to changes in data returned by a service too. Turns out that you can't do that .. directly. but you easily can do it if you wrap it inside a function. Follow the code below with the comments inside to get a cleat idea: 

```javascript

// remember factories and their syntax ?
myApp.factory("dataService", function() {
	var getSomeData = function () { return someData }
	
	return {
		getSomeData: getSomeData
	}
})

myApp.controller("mainCtrl", function($scope, dataService) { // remember injection?
	$scope.data = dataService.getSomeData() ; 
	
	// now the dataService might be connected and synced with a remote API
	// so it can change it's value internally ... 
	// TaaDaa! :
	$scope.$watch(function() {return dataService.getSomeData() }, 
		function(n,o) {} , true 
	)
	
})
```


We can extend our last example to make something cool. 

Add the following markup to your html: 

```html
<div class="row">
  <div class="col col-sm-6 col-sm-offset-3 form-group">
    <input 
    	ng-model-options="{ debounce: 500 }"
    	class="form-control" 
    	type="text" 
    	placeholder="enter username" style="margin : 20px" 
    />
    <label class="label label-success"> Result is here</label>
    <label class="label label-warning"> Searching </label>
    <label class="label label-danger"> No result found!</label>
  </div>
</div>
<div class="row">
  <ul class="list-group">
     <li class="list-group-item">
     </li>
  </ul>
</div>
```

You can easily guess what we want to do. search a username and display a list of repositories!

Let's first explain how. 

- First, add a `$scope.username` property and bind it to input tag.
- $watch form changes and make the $http call that we performed in the previous chapter to get the list of repositories. 
- Show the loading span while the request is being performed. 
- Show the success message if request comes back .. well, obviously, successfully. 
- Show the error message if the request fails for any reason. 
- render the list of repositories. 

The trivial approach to this would be to simply just do : 

```javascript 
// assuming that $scope.username is the name 
$scope.$watch("username", function(n, o) {
	// make the http call
})
```

This is ... not good. because we did not wanted to make 10 http calls during the time when  i type my own  github username : `kianenigma`

If you go to Angular's documentation over [forms](https://docs.angularjs.org/guide/forms), you'll see that we can use a `debounce` property. When for example we set it to 250, it means that the model in $scope will only update, when the input in UI stays fix for 250ms, hence the $watch will be invoked only then. Change the input tag to: 

```html
<input 
		ng-model="username"
    	ng-model-options="{ debounce: 500 }"
    	class="form-control" 
    	type="text" 
    	placeholder="enter username" style="margin : 20px" 
/>
```
write a `$watch` statement for `$scope.username`, log the values and change the debounce value. See how the behavior differs! 

Now, the main deal! 

add the following javascript code to your controller: 

```javascript
$scope.repos = [];
$scope.reqStatus = 0;
// 0 = success
// 1 = req sent
// 2 = error
$scope.$watch("username", function (n, o) {
  if (n) {
    $scope.reqStatus = 1;
    $http({
        method: 'GET',
        url: 'https://api.github.com/users/' + n + '/repos',
      })
      .then(function (response) {
        $scope.reqStatus = 0;
        $scope.repos = response.data;
        console.log(response);
      }, function (err) {
        $scope.reqStatus = 2;
        $scope.repos = [];
        console.log("ERROR: ", err);
      })
  }
})
```

Note that `reqStatus` is a variable we use to show one of the `label`s indication the status. storing the list of repositories (`response.data`) inside `$scope.repos` is trivial and same as what we did before when we discussed iteration. Also we wrapped the request inside the `if ()` so that it wont get fired when the input is empty. 

In the final draft of our HTML, we just added the `ng-show` directives to show one of the labels, and added the `ng-repeat` to `ul`

```html
<div class="row">
  <div class="col col-sm-6 col-sm-offset-3 form-group">
    <input 
    	ng-model-options="{ debounce: 500 }"
    	class="form-control" 
    	type="text" 
    	placeholder="enter username" style="margin : 20px" 
    />
    <label ng-show="reqStatus == 0" class="label label-success"> Result is here</label>
    <label ng-show="reqStatus == 1" class="label label-warning"> Searching </label>
    <label ng-show="reqStatus == 2" class="label label-danger"> No result found!</label>
  </div>
</div>
<div class="row">
  <ul class="list-group">
     <li ng-repeat="repo in repos" class="list-group-item">
     	<strong> {{ repo.name }} </strong> : {{ repo.description }} 
     </li>
  </ul>
</div>
```

This example turned out to be better than what i had expected! Not on;y that we used our main topics, `$http` and `$watch`, we also used some `forms` and `ngClasses`. Perfect! 


----------


## Controller events and communication


----------


## The great $rootScope
